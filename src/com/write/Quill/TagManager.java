package com.write.Quill;

import java.util.Comparator;
import java.util.Date;
import java.util.LinkedList;
import java.util.ListIterator;

import android.util.Log;

public class TagManager {
	private static final String TAG = "TagManager";
	private static TagManager tagManager = new TagManager(); 
	private static LinkedList<Tag> tags = new LinkedList<Tag>();
	
	public class Tag {
		protected String name;
		protected int count;
		protected boolean autogenerated = false;
		protected long ctime;
		
		public Tag(String tagName) {
			name = new String(tagName);
			ctime = System.currentTimeMillis();
		}
		
		public String toString() {
			return name;
		}
	}
	
	public class TagSet {
		protected LinkedList<Tag> tags = new LinkedList<Tag>();
		
		public TagSet copy() {
			TagSet ts = new TagSet();
			ts.tags.addAll(tags);
			return ts;
		}
		
		public boolean contains(Tag tag) {
			return tags.contains(tag);
		}
		
		public boolean add(Tag tag) {
			if (!tags.contains(tag)) {
				tags.add(tag);
				return true;
			}
			return false;
		}
		
		public boolean remove(Tag tag) {
			return tags.remove(tag);
		}
		
		public LinkedList<Tag> allTags() {
			return tagManager.tags;
		}
		
		public int size() {
			return tags.size();
		}
	}
	
	
	private TagManager() {}
	
	public static TagManager getTagManager() {
		return tagManager;
	}
	
	public static TagSet newTagSet() {
		return tagManager.new TagSet();
	}
	
	public Tag makeTag(String name) {
		ListIterator<Tag> iter = tags.listIterator();
		while (iter.hasNext()) {
			Tag t = iter.next();
			if (name.equalsIgnoreCase(t.name))
				return t;
		}
		Tag t = new Tag(name);
		tags.add(t);
		Log.d(TAG, "Created new tag "+name+" "+tagManager.tags.size());
		return t;
	}
	
	public Tag get(int position) {
		return tags.get(position);
	}
	
	
	public class GreaterThan implements Comparator<Tag> {
		@Override
		public int compare(Tag t0, Tag t1) {
			int x = t0.count;
			int y = t1.count;
			if(x > y) {
				return -1;
			} else if(x == y) {
				return 0;
			} else {
				return 1;
			}
		}
	}

}
